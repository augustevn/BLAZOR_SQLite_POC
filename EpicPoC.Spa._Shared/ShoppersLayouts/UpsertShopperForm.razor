@inject IShoppersProvider ShoppersProvider

<EditForm Model="@_shopperModel" OnValidSubmit="HandleContactForm">
    <div class="mb-3">
        <label for="name" class="form-label">Name <span class="text-danger">*</span></label>
        <InputText id="name" class="form-control" @bind-Value="_shopperModel.Name" required/>
    </div>
    
    <div class="mb-3">
        <label for="account-id" class="form-label">Account ID <span class="text-danger">*</span></label>
        <InputNumber id="account-id" class="form-control" @bind-Value="_shopperModel.AccountId" required/>
    </div>
    
    <div class="d-grid mb-2">
        <button type="submit" class="btn btn-primary" disabled="@(IsSubmit)">
            @BtnLabel
        </button>
    </div>
</EditForm>

@if (IsSubmit && !string.IsNullOrWhiteSpace(SuccessMessage))
{
    <p class="mt-2 text-@(IsSuccess == true ? "success" : "danger")">
        @SuccessMessage
    </p>
}

@code {

    [Parameter]
    public string? BtnLabel { get; set; } = "Submit";

    [Parameter]
    public EventCallback OnSubmit { get; set; }

    private bool IsSubmit { get; set; }
    private bool? IsSuccess { get; set; }
    private string? SuccessMessage { get; set; }

    private UpsertShopperRequest _shopperModel = new();

    private async Task HandleContactForm()
    {
        IsSubmit = true;

        IsSuccess = await ShoppersProvider.UpsertShopper(_shopperModel);

        SuccessMessage = IsSuccess == true ? "Success!" : "Oops, failed.";

        Task.Delay(2000).ContinueWith(_ =>
        {
            ResetForm();
            StateHasChanged();
            OnSubmit.InvokeAsync();
        });
    }

    private void ResetForm()
    {
        _shopperModel = new UpsertShopperRequest();

        IsSubmit = false;
        IsSuccess = null;
        SuccessMessage = null;
    }
}